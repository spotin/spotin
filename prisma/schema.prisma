generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SPOT_IN_DATABASE_URL")
}

enum UserRole {
  ADMIN
  STANDARD_USER
  CERTIFIED_USER
  GUEST
}

model Spot {
  id          String    @id @default(uuid())
  title       String?   @db.VarChar(255)
  description String?
  latitude    Float?    @db.DoublePrecision
  longitude   Float?    @db.DoublePrecision
  payload     Json?     @db.Json
  redirection String?   @db.VarChar(255)
  referenced  Boolean   @default(false) @db.Boolean
  configured  Boolean   @default(true) @db.Boolean
  userId      String    @map(name: "user_id")
  createdAt   DateTime  @default(now()) @map(name: "created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @updatedAt @map(name: "updated_at") @db.Timestamptz(6)
  deletedAt   DateTime? @map(name: "deleted_at") @db.Timestamptz(6)

  users User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map(name: "spots")
}

model Token {
  id        String    @id @default(uuid())
  hash      String    @unique @db.VarChar(255)
  name      String    @db.VarChar(255)
  userId    String    @map(name: "user_id")
  createdAt DateTime  @default(now()) @map(name: "created_at") @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @map(name: "updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map(name: "deleted_at") @db.Timestamptz(6)

  users User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map(name: "tokens")
}

model User {
  id                     String    @id @default(uuid())
  username               String    @unique @db.VarChar(255)
  email                  String    @unique @db.VarChar(255)
  resetPasswordRequestId String?   @unique @map(name: "reset_password_request_id")
  password               String    @db.VarChar(255)
  spots                  Spot[]
  tokens                 Token[]
  role                   UserRole  @default(STANDARD_USER)
  enabled                Boolean   @default(true)
  createdAt              DateTime  @default(now()) @map(name: "created_at") @db.Timestamptz(6)
  updatedAt              DateTime  @updatedAt @map(name: "updated_at") @db.Timestamptz(6)
  deletedAt              DateTime? @map(name: "deleted_at") @db.Timestamptz(6)

  resetPasswordRequest ResetPasswordRequest? @relation(fields: [resetPasswordRequestId], references: [id])

  @@map(name: "users")
}

model ResetPasswordRequest {
  id        String   @id @default(uuid())
  user      User?
  token     String   @unique @db.VarChar(255)
  createdAt DateTime @default(now()) @map(name: "created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map(name: "updated_at") @db.Timestamptz(6)

  @@map(name: "reset_password_requests")
}
