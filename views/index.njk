{% extends "layout.njk" %}
{% block body %}
  <div>
    <h1>
      {{ t('ui.index.subtitle') }}
    </h1>
    <p>
      {{ t('ui.index.paragraphOne') }}
    </p>
    <p>
      {{ t('ui.index.paragraphTwo') }}
    </p>
    <p class="m-0">
      {{ t('ui.index.paragraphThree') }}
    </p>
    <div class="grid">
      <div>
        <h2 class="m-0">
          <span class="fas fa-users"></span>
        </h2>
        <p class="m-0">
          <b>
            {{ t('ui.index.stats.registeredUsers', { number: stats.numberOfUsers }) }}
          </b>
        </p>
      </div>
      <div>
        <h2 class="m-0">
          <span class="fas fa-map-marker-alt"></span>
        </h2>
        <p class="m-0">
          <b>
            {{ t('ui.index.stats.publicSpots', { number: stats.numberOfPublicSpots }) }}
          </b>
        </p>
      </div>
      <div>
        <h2 class="m-0">
          <span class="fas fa-landmark"></span>
        </h2>
        <p class="m-0">
          <b>
            {{ t('ui.index.stats.certifiedUsers', { number: stats.numberOfCertifiedUsers }) }}
          </b>
        </p>
      </div>
    </div>

    <h3 class="mt-0">
      {{ t('ui.index.exploreTheSpots') }}
    </h3>

    <div id='map' class="map" style='width: 100%; height: 70vh;'></div>
  </div>
{% endblock %}

{% block javascript %}
  <script>
    window.onload = async () => {
      const response = await fetch('/api/spots/public');
      const spotsWithStatistics = await response.json();

      // https://codepen.io/bothness/pen/ExgwzEG
      const mapGlStyle = {
        version: 8,
        sources: {
          osm: {
            type: 'raster',
            tiles: ['https://a.tile.openstreetmap.org/{z}/{x}/{y}.png'],
            tileSize: 256,
            attribution: '&copy; OpenStreetMap Contributors',
            // https://wiki.openstreetmap.org/wiki/Zoom_levels#Mapbox_GL
            maxzoom: 19
          }
        },
        layers: [
          {
            id: 'osm',
            type: 'raster',
            source: 'osm'
          }
        ]
      };

      const mapBounds = [
        [
          spotsWithStatistics.spotsStatistics.longitude.min ?? -180,
          spotsWithStatistics.spotsStatistics.latitude.min ?? -90
        ],
        [
          spotsWithStatistics.spotsStatistics.longitude.max ?? 180,
          spotsWithStatistics.spotsStatistics.latitude.max ?? 90
        ]
      ]

      // Add custom control to center on spot locations
      class CenterOnSpotsControl {
        onAdd(map) {
          this._map = map;
          this._container = document.createElement('div');
          this._container.className = 'maplibregl-ctrl maplibregl-ctrl-group';
          this._container.innerHTML = "<button type=\"button\" title=\"{{ t('ui.spots.redirect.map.centerOnSpotLocations') }}\"><span class=\"fas fa-crosshairs\"></span></button>";

          this._container.onclick = () => {
            map.fitBounds(mapBounds, {padding: 100});

          };

          return this._container;
        }

        onRemove() {
          this
            ._container
            .parentNode
            .removeChild(this._container);
          this._map = undefined;
        }
      }

      const map = new maplibregl.Map({
        container: 'map',
        style: mapGlStyle,
        locale: {
          'AttributionControl.ToggleAttribution': "{{ t('ui.spots.redirect.map.toggleAttribution')|safe }}",
          'FullscreenControl.Enter': "{{ t('ui.spots.redirect.map.enterFullscreen')|safe }}",
          'FullscreenControl.Exit': "{{ t('ui.spots.redirect.map.exitFullscreen')|safe }}",
          'NavigationControl.ResetBearing': "{{ t('ui.spots.redirect.map.resetBearing')|safe }}",
          'NavigationControl.ZoomIn': "{{ t('ui.spots.redirect.map.zoomIn')|safe }}",
          'NavigationControl.ZoomOut': "{{ t('ui.spots.redirect.map.zoomOut')|safe }}",
          'GeolocateControl.FindMyLocation': "{{ t('ui.spots.redirect.map.findMyLocation')|safe }}",
          'GeolocateControl.LocationNotAvailable': "{{ t('ui.spots.redirect.map.locationNotAvailable')|safe }}"
        },
        attributionControl: false,
        zoom: 1
      });

      const attributionControl = new maplibregl.AttributionControl({compact: true});
      const navigationControl = new maplibregl.NavigationControl();
      const geolocateControl = new maplibregl.GeolocateControl({
        positionOptions: {
          enableHighAccuracy: false
        },
        trackUserLocation: true
      });
      const centerOnSpotsControl = new CenterOnSpotsControl();
      const fullscreenControl = new maplibregl.FullscreenControl()

      map.addControl(attributionControl, 'top-left');
      map.addControl(navigationControl, 'top-right');
      map.addControl(fullscreenControl, 'bottom-left');
      map.addControl(geolocateControl, 'bottom-right');
      map.addControl(centerOnSpotsControl, 'bottom-right');

      map.fitBounds(mapBounds, {padding: 100});

      for (const spot of spotsWithStatistics.spots) {
        if (spot.latitude == null || spot.longitude == null) {
          continue;
        }

        let popupContent = document.createElement('div');

        const spotName = document.createElement('strong');
        spotName.textContent = spot.name || "{{ t('ui.spots.view.noName') }}";

        const spotLink = document.createElement('a');
        spotLink.href = `/spots/${spot.id}/redirect`;
        spotLink.target = '_self';

        spotLink.appendChild(spotName);
        popupContent.appendChild(spotLink);

        const popup = new maplibregl
          .Popup({
            anchor: 'top',
            closeButton: false,
            closeOnClick: true,
            closeOnMove: true,
            offset: 5,
            className: 'text-center',
            focusAfterOpen: false
          })
          .setDOMContent(popupContent);

        const marker = new maplibregl
          .Marker({color: "#e53935"})
          .setLngLat([spot.longitude, spot.latitude])
          .setPopup(popup)
          .addTo(map);

        marker
          .getElement()
          .style
          .cursor = 'pointer';
      }
    }
  </script>
{% endblock %}
