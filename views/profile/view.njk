{% extends "layout.njk" %}
{% block body %}
  <h1>
    @{{ profile.username }}
  </h1>

  {{ profile.bio|safe }}

  <h3>
    {{ t('ui.profile.view.explorePublicSpots', {
      username: profile.username,
      number: profile.spotsStatistics.count
    }) }}
  </h3>

  <article>
    <div id='map' class="map" style='width: 100%; height: 70vh;'></div>

    <footer>
      <div role="group" class="m-0">
        <button class="secondary" data-target="modal-report-profile" onclick="toggleModal(event)">
          <small>
            <span class="fas fa-flag"></span>
            {{ t('ui.profile.view.report.button') }}
          </small>
        </button>
        <button class="secondary" data-target="modal-like-profile" onclick="toggleModal(event)">
          <small>
            <span style="color: Red;">
              <span class="fas fa-heart"></span>
            </span>
            {{ t('ui.profile.view.like.button') }}
          </small>
        </button>
        <button class="secondary" data-target="modal-share-profile" onclick="toggleModal(event)">
          <small>
            <span class="fas fa-share-alt"></span>
            {{ t('ui.profile.view.share.button') }}
          </small>
        </button>
      </div>
    </footer>
  </article>

  <dialog id="modal-report-profile">
    <article>
      <header>
        <button aria-label="{{ t('ui.profile.view.report.modal.actions.close') }}" rel="prev" data-target="modal-report-profile" onclick="toggleModal(event)"></button>
        <h2>
          {{ t('ui.profile.view.report.modal.title') }}
        </h2>
      </header>
      <p class="text-justify">
        {{ t('ui.profile.view.report.modal.description') }}
      </p>
      <footer>
        <button class="secondary" data-target="modal-report-profile" onclick="toggleModal(event)">
          {{ t('ui.profile.view.report.modal.actions.close') }}
        </button>
        <button class="plausible-event-name=report-profile" autofocus="autofocus" data-target="modal-report-profile" onclick="toggleModal(event)">
          {{ t('ui.profile.view.report.modal.actions.report') }}
        </button>
      </footer>
    </article>
  </dialog>

  <dialog id="modal-like-profile">
    <article>
      <header>
        <button aria-label="{{ t('ui.profile.view.like.modal.actions.close') }}" rel="prev" data-target="modal-like-profile" onclick="toggleModal(event)"></button>
        <h2>
          {{ t('ui.profile.view.like.modal.title') }}
        </h2>
      </header>
      <p class="text-justify">
        {{ t('ui.profile.view.like.modal.description') }}
      </p>
      <footer>
        <button class="secondary" data-target="modal-like-profile" onclick="toggleModal(event)">
          {{ t('ui.profile.view.like.modal.actions.close') }}
        </button>
        <button class="plausible-event-name=like-profile" autofocus="autofocus" data-target="modal-like-profile" onclick="toggleModal(event)">
          {{ t('ui.profile.view.like.modal.actions.like') }}
        </button>
      </footer>
    </article>
  </dialog>

  <dialog id="modal-share-profile" onclose="enableShareProfileButton()">
    <article>
      <header>
        <button aria-label="{{ t('ui.profile.view.share.modal.actions.close') }}" rel="prev" data-target="modal-share-profile" onclick="toggleModal(event)"></button>
        <h2>
          {{ t('ui.profile.view.share.modal.title') }}
        </h2>
      </header>
      <p class="text-justify">
        {{ t('ui.profile.view.share.modal.description', { websiteTarget: profile.websiteTarget }) }}
      </p>
      <footer>
        <button class="secondary" data-target="modal-share-profile" onclick="toggleModal(event)">
          {{ t('ui.profile.view.share.modal.actions.close') }}
        </button>
        <button id="share-button" class="plausible-event-name=share-profile" autofocus="autofocus" onclick="shareProfile(event)">
          {{ t('ui.profile.view.share.modal.actions.share') }}
        </button>
      </footer>
    </article>
  </dialog>
{% endblock %}

{% block javascript %}
  <script>
    window.onload = async () => {
      const response = await fetch('/api/profile/{{ profile.username }}');
      const profileData = await response.json();

      // https://codepen.io/bothness/pen/ExgwzEG
      const mapGlStyle = {
        version: 8,
        sources: {
          osm: {
            type: 'raster',
            tiles: ['https://a.tile.openstreetmap.org/{z}/{x}/{y}.png'],
            tileSize: 256,
            attribution: '&copy; OpenStreetMap Contributors',
            // https://wiki.openstreetmap.org/wiki/Zoom_levels#Mapbox_GL
            maxzoom: 19
          }
        },
        layers: [
          {
            id: 'osm',
            type: 'raster',
            source: 'osm'
          }
        ]
      };

      const mapBounds = [
        [
          profileData.spotsStatistics.longitude.min ?? -180,
          profileData.spotsStatistics.latitude.min ?? -90
        ],
        [
          profileData.spotsStatistics.longitude.max ?? 180,
          profileData.spotsStatistics.latitude.max ?? 90
        ]
      ]

      // Add custom control to center on spot locations
      class CenterOnSpotsControl {
        onAdd(map) {
          this._map = map;
          this._container = document.createElement('div');
          this._container.className = 'maplibregl-ctrl maplibregl-ctrl-group';
          this._container.innerHTML = "<button type=\"button\" title=\"{{ t('ui.profile.view.map.centerOnSpotLocations') }}\"><span class=\"fas fa-crosshairs\"></span></button>";

          this._container.onclick = () => {
            map.fitBounds(mapBounds, {padding: 100});

          };

          return this._container;
        }

        onRemove() {
          this
            ._container
            .parentNode
            .removeChild(this._container);
          this._map = undefined;
        }
      }

      const map = new maplibregl.Map({
        container: 'map',
        style: mapGlStyle,
        locale: {
          'AttributionControl.ToggleAttribution': "{{ t('ui.profile.view.map.toggleAttribution')|safe }}",
          'FullscreenControl.Enter': "{{ t('ui.profile.view.map.enterFullscreen')|safe }}",
          'FullscreenControl.Exit': "{{ t('ui.profile.view.map.exitFullscreen')|safe }}",
          'NavigationControl.ResetBearing': "{{ t('ui.profile.view.map.resetBearing')|safe }}",
          'NavigationControl.ZoomIn': "{{ t('ui.profile.view.map.zoomIn')|safe }}",
          'NavigationControl.ZoomOut': "{{ t('ui.profile.view.map.zoomOut')|safe }}",
          'GeolocateControl.FindMyLocation': "{{ t('ui.profile.view.map.findMyLocation')|safe }}",
          'GeolocateControl.LocationNotAvailable': "{{ t('ui.profile.view.map.locationNotAvailable')|safe }}"
        },
        attributionControl: false,
        zoom: 1
      });

      const attributionControl = new maplibregl.AttributionControl({compact: true});
      const navigationControl = new maplibregl.NavigationControl();
      const geolocateControl = new maplibregl.GeolocateControl({
        positionOptions: {
          enableHighAccuracy: false
        },
        trackUserLocation: true
      });
      const centerOnSpotsControl = new CenterOnSpotsControl();
      const fullscreenControl = new maplibregl.FullscreenControl()

      map.addControl(attributionControl, 'top-left');
      map.addControl(navigationControl, 'top-right');
      map.addControl(fullscreenControl, 'bottom-left');
      map.addControl(geolocateControl, 'bottom-right');
      map.addControl(centerOnSpotsControl, 'bottom-right');

      map.fitBounds(mapBounds, {padding: 100});

      for (const spot of profileData.spots) {
        if (spot.latitude == null || spot.longitude == null) {
          continue;
        }

        let popupContent = document.createElement('div');

        const spotName = document.createElement('strong');
        spotName.textContent = spot.name || "{{ t('ui.spots.view.noName') }}";

        const spotLink = document.createElement('a');
        spotLink.href = `/spots/${spot.id}/redirect`;
        spotLink.target = '_self';

        spotLink.appendChild(spotName);
        popupContent.appendChild(spotLink);

        const popup = new maplibregl
          .Popup({
            anchor: 'top',
            closeButton: false,
            closeOnClick: true,
            closeOnMove: true,
            offset: 5,
            className: 'text-center',
            focusAfterOpen: false
          })
          .setDOMContent(popupContent);

        const marker = new maplibregl
          .Marker({color: "#e53935"})
          .setLngLat([spot.longitude, spot.latitude])
          .setPopup(popup)
          .addTo(map);

        marker
          .getElement()
          .style
          .cursor = 'pointer';
      }
    }

    const shareProfile = (event) => {
      event.preventDefault();

      const shareButton = event.currentTarget;

      if (navigator.share) {
        navigator
          .share({title: document.title, url: window.location.href})
          .then(() => {
            shareButton.textContent = "{{ t('ui.spots.redirect.share.modal.actions.shared') }}";
          })
          .catch(() => {
            enableShareProfileButton();
          });
      } else {
        navigator
          .clipboard
          .writeText(window.location.href)
          .then(() => {
            shareButton.textContent = "{{ t('ui.spots.redirect.share.modal.actions.copied') }}";
          })
          .catch(() => {
            enableShareProfileButton();
          });
      }

      shareButton.disabled = true;
    };

    const enableShareProfileButton = () => {
      const shareButton = document.getElementById("share-button");

      shareButton.textContent = "{{ t('ui.spots.redirect.share.modal.actions.share') }}";

      shareButton.disabled = false;
    };
  </script>
{% endblock %}
