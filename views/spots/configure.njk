{% extends "public-layout.njk" %}
{% block body %}
  <h2>
    <i class="fas fa-map-marker-alt"></i>
    {{ t('ui.spots.form.title') }}
  </h2>
  <form id="form">
    <fieldset>
      <input type="hidden" name="id" id="id" value="{{ spot.id }}">
      <input type="hidden" name="to-configure" id="to-configure" value="{{ toConfigure }}">

      <label for="name">
        {{ t('ui.spots.form.name.label') }}
      </label>
      <input name="name" id="name" placeholder="{{ t('ui.spots.form.name.placeholder') }}" value="{{ spot.name }}" autofocus="autofocus">

      <label for="description">
        {{ t('ui.spots.form.description.label') }}
      </label>
      <textarea id="description" type="text" name="description" placeholder="{{ t('ui.spots.form.description.placeholder') }}">{{ spot.description }}</textarea>

      <!-- Prompt user for current location -->
      <button type="button" id="get-location-button">
        <i class="fas fa-map-marker-alt"></i>
        {{ t('ui.spots.form.useCurrentLocation') }}
      </button>

      <label for="latitude">
        {{ t('ui.spots.form.latitude.label') }}
      </label>
      <input id="latitude" type="number" step="0.00001" name="latitude" lang="en" placeholder="{{ t('ui.spots.form.latitude.placeholder') }}" value="{{ spot.latitude }}" min="-90" max="90">

      <label for="longitude">
        {{ t('ui.spots.form.longitude.label') }}
      </label>
      <input id="longitude" type="number" step="0.00001" name="longitude" lang="en" placeholder="{{ t('ui.spots.form.longitude.placeholder') }}" value="{{ spot.longitude }}" min="-180" max="180">

      <label for="website-target">
        {{ t('ui.spots.form.websiteTarget.label') }}
      </label>
      <input id="website-target" type="text" name="website-target" placeholder="{{ t('ui.spots.form.websiteTarget.placeholder') }}" value="{{ spot.websiteTarget }}">

      <label for="configured">
        {{ t('ui.spots.form.configured.label') }}
      </label>
      <select id="configured" name="configured" required="required">
        <option value="true" {{ 'selected' if not spot or spot.configured }}>
          {{ t('ui.spots.form.configured.values.true') }}
        </option>
        <option value="false" {{ 'selected' if spot and not spot.configured }}>
          {{ t('ui.spots.form.configured.values.false') }}
        </option>
      </select>
      <small>
        {{ t('ui.spots.form.configured.note') }}
      </small>

      {% if role === "CERTIFIED_USER" or role == "ADMIN" %}
        <label for="public">
          {{ t('ui.spots.form.public.label') }}
        </label>
        <select id="public" name="public" required="required">
          <option value="true" {{ 'selected' if spot.public }}>
            {{ t('ui.spots.form.public.values.true') }}
          </option>
          <option value="false" {{ 'selected' if not spot.public }}>
            {{ t('ui.spots.form.public.values.false') }}
          </option>
        </select>
        <small>
          {{ t('ui.spots.form.public.note') }}
        </small>
      {% endif %}

      <details>
        <summary>
          {{ t('ui.spots.form.optionsForAdvancedUsers.label') }}
        </summary>
        <p>
          {{ t('ui.spots.form.optionsForAdvancedUsers.note') }}
        </p>
        <label for="payload">
          {{ t('ui.spots.form.optionsForAdvancedUsers.payload.label') }}
        </label>
        <textarea id="payload" type="text" name="payload" placeholder="{{ t('ui.spots.form.optionsForAdvancedUsers.payload.placeholder') }}">{{ spot.payload }}</textarea>
        <small>
          {{ t('ui.spots.form.optionsForAdvancedUsers.payload.note') }}
        </small>
      </details>

    </fieldset>
    <div id="success"></div>
    <div id="errors"></div>
    <button type="submit">
      <i class="fas fa-save"></i>
      Save
    </button>
  </form>
{% endblock %}

{% block javascript %}
  <script>
    const getLocationButton = document.getElementById("get-location-button");

    getLocationButton.addEventListener("click", async () => {
      if (!navigator.geolocation) {
        return;
      }

      const position = await new Promise((resolve, reject) => {
        navigator
          .geolocation
          .getCurrentPosition(resolve, reject);
      });

      const latitude = document.getElementById("latitude");
      const longitude = document.getElementById("longitude");

      latitude.value = position
        .coords
        .latitude
        .toFixed(5);
      longitude.value = position
        .coords
        .longitude
        .toFixed(5);
    });

    const form = document.getElementById("form");
    const success = document.getElementById("success");
    const errors = document.getElementById("errors");

    const latitude = document.getElementById("latitude");

    form.addEventListener("submit", async (event) => {
      event.preventDefault();

      // Remove aria-invalid from all fields
      document
        .querySelectorAll('[aria-invalid]')
        .forEach((elem) => {
          elem.setAttribute('aria-invalid', 'false');
        });

      success.innerHTML = "";
      errors.innerHTML = "";

      // Get the form data
      const toConfigure = document.getElementById("to-configure");
      const id = document.getElementById("id");
      const title = document.getElementById("title");
      const description = document.getElementById("description");
      const latitude = document.getElementById("latitude");
      const longitude = document.getElementById("longitude");
      const payload = document.getElementById("payload");
      const redirection = document.getElementById("redirection");
      const referenced = document.getElementById("referenced");
      const configured = document.getElementById("configured");

      const body = JSON.stringify({
        title: title.value
          ? title.value
          : undefined,
        description: description.value
          ? description.value
          : undefined,
        latitude: Number(latitude.value),
        longitude: Number(longitude.value),
        payload: payload.value
          ? payload.value
          : undefined,
        redirection: redirection.value
          ? redirection.value
          : undefined,
        referenced: referenced.checked,
        configured: configured.checked
      });

      let endpoint = "/api/spots";
      let method = "POST";

      if (id.value) {
        endpoint += `/${id.value}`;
        method = "PATCH";
      }

      if (toConfigure.value) {
        endpoint += "/configure";
      }

      const response = await fetch(endpoint, {
        method,
        headers: {
          "Content-Type": "application/json"
        },
        body
      });

      if (response.ok) {
        const spot = await response.json();

        window.location.href = `/spots/${spot.id}`;
      } else {
        await manageErrors(response, errors);
      }
    });
  </script>
{% endblock %}
