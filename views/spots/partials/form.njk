<form id="form">
  <fieldset>
    {% if spot %}
      <input type="hidden" name="id" id="id" value="{{ spot.id }}">
    {% endif %}

    <label for="name">
      {{ t('ui.spots.form.name.label') }}
    </label>
    <input name="name" id="name" placeholder="{{ t('ui.spots.form.name.placeholder') }}" value="{{ spot.name }}" autofocus="autofocus">

    <label for="description">
      {{ t('ui.spots.form.description.label') }}
    </label>
    <textarea id="description" type="text" name="description" rows="15" placeholder="{{ t('ui.spots.form.description.placeholder') }}">{{ spot.description|safe }}</textarea>
    <small>
      <span class="fab fa-markdown"></span>
      {{
        t('ui.spots.form.description.note', {
          markdown: '<a href="https://www.markdownguide.org" target="_blank" rel="noopener noreferrer">Markdown</a>',
          markdownIt: '<a href="https://www.npmjs.com/package/markdown-it" target="_blank" rel="noopener noreferrer">markdown-it</a>',
          markdownItAttrs: '<a href="https://www.npmjs.com/package/markdown-it-attrs" target="_blank" rel="noopener noreferrer">markdown-it-attrs</a>'
        })|safe
      }}
    </small>

    <label for="latitude">
      {{ t('ui.spots.form.latitude.label') }}
    </label>
    <input id="latitude" type="number" step="0.000000000000001" name="latitude" lang="en" placeholder="{{ t('ui.spots.form.latitude.placeholder') }}" value="{{ spot.latitude }}" min="-90" max="90">
    <small id="get-latitude">
      <span class="fas fa-map-marker-alt"></span>
      {{ t('ui.spots.form.useCurrentLocation') }}
    </small>

    <label for="longitude">
      {{ t('ui.spots.form.longitude.label') }}
    </label>
    <input id="longitude" type="number" step="0.000000000000001" name="longitude" lang="en" placeholder="{{ t('ui.spots.form.longitude.placeholder') }}" value="{{ spot.longitude }}" min="-180" max="180">
    <small id="get-longitude">
      <span class="fas fa-map-marker-alt"></span>
      {{ t('ui.spots.form.useCurrentLocation') }}
    </small>

    <label for="websiteTarget">
      {{ t('ui.spots.form.websiteTarget.label') }}
    </label>
    <input id="websiteTarget" type="text" name="websiteTarget" placeholder="{{ t('ui.spots.form.websiteTarget.placeholder') }}" value="{{ spot.websiteTarget }}">

    {% if role === "CERTIFIED_USER" or role == "ADMIN" %}
      <label for="public">
        {{ t('ui.spots.form.public.label') }}
      </label>
      <select id="public" name="public" required="required">
        <option value="true" {{ 'selected' if spot.public }}>
          {{ t('ui.spots.form.public.values.true') }}
        </option>
        <option value="false" {{ 'selected' if not spot.public }}>
          {{ t('ui.spots.form.public.values.false') }}
        </option>
      </select>
      <small>
        {{ t('ui.spots.form.public.note') }}
      </small>
    {% else %}
      <input type="hidden" name="public" id="public" value="{{ spot.public }}">
    {% endif %}

    <details>
      <summary>
        {{ t('ui.spots.form.optionsForAdvancedUsers.label') }}
      </summary>
      <p>
        {{ t('ui.spots.form.optionsForAdvancedUsers.note') }}
      </p>
      <label for="payload">
        {{ t('ui.spots.form.optionsForAdvancedUsers.payload.label') }}
      </label>
      <textarea id="payload" type="text" name="payload" placeholder="{{ t('ui.spots.form.optionsForAdvancedUsers.payload.placeholder') }}">{{ spot.payload }}</textarea>
      <small>
        {{ t('ui.spots.form.optionsForAdvancedUsers.payload.note') }}
      </small>

      <label for="configured">
        {{ t('ui.spots.form.configured.label') }}
      </label>
      <select id="configured" name="configured" required="required">
        <option value="true" {{ 'selected' if not spot or spot.configured or role == "GUEST"}}>
          {{ t('ui.spots.form.configured.values.true') }}
        </option>
        <option value="false" {{ 'selected' if spot and not spot.configured and role != "GUEST" }}>
          {{ t('ui.spots.form.configured.values.false') }}
        </option>
      </select>
      <small>
        {{ t('ui.spots.form.configured.note') }}
      </small>

      <label for="directAccessToWebsiteTarget">
        {{ t('ui.spots.form.directAccessToWebsiteTarget.label') }}
      </label>
      <select id="directAccessToWebsiteTarget" name="directAccessToWebsiteTarget" required="required">
        <option value="true" {{ 'selected' if spot and spot.directAccessToWebsiteTarget }}>
          {{ t('ui.spots.form.directAccessToWebsiteTarget.values.true') }}
        </option>
        <option value="false" {{ 'selected' if not spot or not spot.directAccessToWebsiteTarget }}>
          {{ t('ui.spots.form.directAccessToWebsiteTarget.values.false') }}
        </option>
      </select>
      <small>
        {{ t('ui.spots.form.directAccessToWebsiteTarget.note') }}
      </small>
    </details>

  </fieldset>
  <div id="success"></div>
  <div id="errors"></div>

  {% if spot %}
    <a href="/spots/{{ spot.id }}">
      <button type="button">
        <span class="fas fa-eye"></span>
        {{ t('ui.spots.form.actions.view') }}
      </button>
    </a>

    <a href="/spots/{{ spot.id }}/delete">
      <button type="button">
        <span class="fas fa-trash"></span>
        {{ t('ui.spots.form.actions.delete') }}
      </button>
    </a>
  {% endif %}

  <button type="submit">
    <span class="fas fa-save"></span>
    {{ t('ui.spots.form.actions.save') }}
  </button>
</form>

<script>
  const getLatitude = document.getElementById("get-latitude");
  const getLongitude = document.getElementById("get-longitude");

  [getLatitude, getLongitude].forEach(elem => {
    elem.addEventListener("click", async () => {
      if (!navigator.geolocation) {
        return;
      }

      const position = await new Promise((resolve, reject) => {
        navigator
          .geolocation
          .getCurrentPosition(resolve, reject);
      });

      const latitude = document.getElementById("latitude");
      const longitude = document.getElementById("longitude");

      latitude.value = position.coords.latitude;
      longitude.value = position.coords.longitude;
    });
  });

  const form = document.getElementById("form");
  const success = document.getElementById("success");
  const errors = document.getElementById("errors");

  form.addEventListener("submit", async (event) => {
    event.preventDefault();

    // Remove aria-invalid from all fields
    document
      .querySelectorAll('[aria-invalid]')
      .forEach((elem) => {
        elem.setAttribute('aria-invalid', 'false');
      });

    success.innerHTML = "";
    errors.innerHTML = "";

    // Get the form data
    const id = document.getElementById("id");
    const name = document.getElementById("name");
    const description = document.getElementById("description");
    const latitude = document.getElementById("latitude");
    const longitude = document.getElementById("longitude");
    const websiteTarget = document.getElementById("websiteTarget");
    const public = document.getElementById("public");
    const configured = document.getElementById("configured");
    const directAccessToWebsiteTarget = document.getElementById("directAccessToWebsiteTarget");
    const payload = document.getElementById("payload");

    const body = JSON.stringify({
      name: name.value || null,
      description: description.value || null,
      latitude: Number(latitude.value) || null,
      longitude: Number(longitude.value) || null,
      websiteTarget: websiteTarget.value || null,
      directAccessToWebsiteTarget: directAccessToWebsiteTarget.value === "true",
      public: public.value === "true",
      configured: configured.value === "true",
      payload: payload.value || null
    });

    let endpoint = "/api/spots";
    let method = "POST";

    if (id.value) {
      {% if role != "GUEST" %}
        endpoint += `/${id.value}`;
      {% else %}
        endpoint += `/${id.value}/configure`;
      {% endif %}

      method = "PATCH";
    }

    const response = await fetch(endpoint, {
      method,
      headers: {
        "Content-Type": "application/json"
      },
      body
    });

    if (response.ok) {
      const spot = await response.json();

      window.location.href = `/spots/${spot.id}`;
    } else {
      await manageErrors(response, errors);
    }
  });
</script>
