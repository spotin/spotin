{% extends "layout.njk" %}

{% block body %}
<h2><i class="fas fa-map-marker-alt"></i> {{ title }} </h2>
<form novalidate>
    <label for="title">
        Title
        {% if errors.title %}
        <span class="error">(cannot be empty)</span>
        <input name="title" id="title" placeholder="Title" value="{{ values.title }}" aria-invalid="true" autofocus>
        {% else %}
        <input name="title" id="title" placeholder="Title" value="{{ values.title }}" autofocus>
        {% endif %}
    </label>

    <label for="description">
        Description
        <textarea id="description" type="text" name="description" placeholder="Description">{{ values.description }}</textarea>
    </label>

    <!-- Prompt user for current location -->
    <button type="button" onclick="navigator.geolocation.getCurrentPosition(position => {
        const { latitude, longitude } = position.coords;
        document.getElementById('latitude').value = latitude;
        document.getElementById('longitude').value = longitude;
    });">
        <i class="fas fa-map-marker-alt"></i> Use current location
    </button>

    <div class="grid">
        <label for="longitude">
            Longitude
            {% if errors.coordinates %}
            <span class="error">(between -180.0 and 180)</span>
            <input id="longitude" type="number" name="longitude" placeholder="Longitude"
                value="{{ values.longitude }}" aria-invalid="true">
            {% else %}
                <input id="longitude" type="number" name="longitude" placeholder="Longitude"
                value="{{ values.longitude }}">
            {% endif %}
        </label>
        <label for="latitude">
            Latitude
            {% if errors.coordinates %}
            <span class="error">(between -90.0 and 90)</span>
            <input id="latitude" type="number" name="latitude" placeholder="Latitude"
                value="{{ values.latitude }}" aria-invalid="true">
            {% else %}
                <input id="latitude" type="number" name="latitude" placeholder="Latitude"
                value="{{ values.latitude }}">
            {% endif %}
        </label>
    </div>

    <label for="redirection">
        Redirection URL
        <input id="redirection" type="text" name="redirection" placeholder="http(s)://"
        value="{{ values.redirection }}">
    </label>

    <label for="referenced">
        Referenced
        <input id="referenced" type="checkbox" name="referenced" value="true" {% if values.referenced %}checked{% endif %}>
    </label>

    <label for="configured">
        Configured
        <input id="configured" type="checkbox" name="configured" value="true" {% if values.configured %}checked{% endif %}>
    </label>

    <br>

    <button type="submit"><i class="fas fa-save"></i> Save</button>
</form>
<script>
    const form = document.querySelector("form");
    const id = "{{ id }}";
    const action = "{{ action }}";

    let url = "/api/spots";
    if (action === 'PATCH') {
        url = `/api/spots/${id}`;
    }

    form.addEventListener("submit", async (event) => {
        event.preventDefault();

        // Get form values
        const title = document.getElementById("title").value;
        const description = document.getElementById("description").value;
        const longitude = document.getElementById("longitude").value;
        const latitude = document.getElementById("latitude").value;
        const referenced = document.getElementById("referenced").checked;
        const configured = document.getElementById("configured").checked;
        const redirection = document.getElementById("redirection").value;

        // Create the DTO
        const createSpotDto = {
            title,
            description,
            longitude: longitude !== '' ? parseFloat(longitude) : null,
            latitude: latitude !== '' ? parseFloat(latitude) : null,
            redirection: redirection !== '' ? redirection : null,
            referenced: referenced,
            configured: configured,
        }

        // Send the DTO to the API
        try {
            const response = await fetch(url, {
                method: action, // *GET, POST, PUT, DELETE, etc.
                mode: "cors", // no-cors, *cors, same-origin
                cache: "no-cache", // *default, no-cache, reload, force-cache, only-if-cached
                credentials: "same-origin", // include, *same-origin, omit
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(createSpotDto), // body data type must match "Content-Type" header
            });

            const { status } = response;

            if (status == 400) {
                alert('A field is wrong or missing, please check your input');
            } else {
                location.replace(`/spots/${id}`);
            }
        } catch (err) {
            console.error(err);
        }
    });

</script>
{% endblock %}
