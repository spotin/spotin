{% extends "layout.njk" %}

{% block body %}
<h2><i class="fas fa-map-marker-alt"></i> {{ title }} </h2>
<form novalidate>
    <label for="title">
        Title
        {% if errors.title %}
        <span class="error">(cannot be empty)</span>
        <input name="title" id="title" placeholder="Title" value="{{ values.title }}" aria-invalid="true">
        {% else %}
        <input name="title" id="title" placeholder="Title" value="{{ values.title }}">
        {% endif %}
    </label>

    <label for="description">
        Description
        <textarea id="description" type="text" name="description" placeholder="Description">{{ values.description }}</textarea>
    </label>
    
    <label for="timestamp">
        Date and time
        {% if errors.timestamp %}
        <span class="error">(must be in the yyyy-MM-ddThh:mm format)</span>
        <input class="datetime" id="timestamp" type="datetime-local" name="timestamp" 
            placeholder="yyyy-MM-ddThh:mm" value="{{ values.timestamp }}" aria-invalid="true">
        {% else %}
        <input class="datetime" id="timestamp" type="datetime-local" name="timestamp" 
            placeholder="yyyy-MM-ddThh:mm" value="{{ values.timestamp }}">
        {% endif %}
    </label>

    <div class="grid">
        <label for="longitude">
            Longitude
            {% if errors.coordinates %}
            <span class="error">(between -180.0 and 180)</span>
            <input id="longitude" type="number" name="longitude" placeholder="Longitude"
                value="{{ values.longitude }}" aria-invalid="true">
            {% else %}
                <input id="longitude" type="number" name="longitude" placeholder="Longitude"
                value="{{ values.longitude }}">
            {% endif %}
        </label>
        <label for="latitude">
            Latitude
            {% if errors.coordinates %}
            <span class="error">(between -90.0 and 90)</span>
            <input id="latitude" type="number" name="latitude" placeholder="Latitude"
                value="{{ values.latitude }}" aria-invalid="true">
            {% else %}
                <input id="latitude" type="number" name="latitude" placeholder="Latitude"
                value="{{ values.latitude }}">
            {% endif %}
        </label>
    </div>

    <label for="redirection">
        Redirection URL
        <input id="redirection" type="text" name="redirection" placeholder="http(s)://"
        value="{{ values.redirection }}">
    </label>

    <label for="referenced">
        Referenced
        <input id="referenced" type="checkbox" name="referenced" role="switch" value="true" {{ ' checked' if values.referenced else '' }} />
    </label>

    <label for="configured">
        Configured
        <input id="configured" type="checkbox" name="configured" role="switch" value="true" {{ ' checked' if values.configured else '' }} />
    </label>
    
    <br>

    <button type="submit"><i class="fas fa-save"></i> Save</button>
</form>
<script>
    const form = document.querySelector("form");

    form.addEventListener("submit", (event) => {
        const title = document.getElementById("title").value;
        const description = document.getElementById("description").value;
        const timestamp = document.getElementById("timestamp").value;
        const longitude = document.getElementById("longitude").value;
        const latitude = document.getElementById("latitude").value;
        const redirection = document.getElementById("redirection").value;
        const referenced = document.getElementById("referenced").value;
        const configured = document.getElementById("configured").value;

        const createSpotDto = {
            title,
            description,
            timestamp: new Date(timestamp),
            longitude: parseInt(longitude, 10),
            latitude: parseInt(latitude, 10),
            redirection,
            referenced: referenced === "true",
            configured: configured === "true",
        }

        const urlEncodedDataPairs = [];

        // Turn the data object into an array of URL-encoded key/value pairs.
        for (const [name, value] of Object.entries(createSpotDto)) {
            urlEncodedDataPairs.push(`${encodeURIComponent(name)}=${encodeURIComponent(value)}`);
        }

        // Combine the pairs into a single string and replace all %-encoded spaces to
        // the '+' character; matches the behavior of browser form submissions.
        const urlEncodedData = urlEncodedDataPairs.join('&').replace(/%20/g, '+');


        const XHR = new XMLHttpRequest();

        // Set up our request
        XHR.open('POST', '/api/spots');

        // Add the required HTTP header for form data POST requests
        XHR.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');

        // Finally, send our data.
        XHR.send(urlEncodedData);
    });
    
</script>
{% endblock %}
